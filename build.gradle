buildscript {
    repositories {
        mavenCentral()
        //maven { url "https://jars.sogeo.services/interlis" }
        maven { url "https://jars.interlis.ch" }
    }
    dependencies {
        classpath("ch.interlis:ili2c-tool:5.6.3")
        classpath("xalan:xalan:2.7.2")
    }
}

plugins {
    id "ch.so.agi.interlis-repository-creator" version "2.0.55"
}

/*
configurations.all {
    resolutionStrategy {
        force 'ch.interlis:ili2c-tool:5.6.3'
        force 'ch.interlis:ili2c-core:5.6.3'    
    }
}
*/

apply from: "$rootDir/gradle/versioning.gradle"

description = """SO!GIS INTERLIS repository"""

def GROUP = "INTERLIS repository creation"

import ch.so.agi.tasks.ModelRepositoryCreator
import ch.so.agi.tasks.ConfigDataRepositoryCreator
import java.text.SimpleDateFormat

tasks.register('versionTxt') {
    group = GROUP
    description = "Create a version.txt file with some information about the build."
    outputs.upToDateWhen { false }
    doLast {
        new File("version.txt").text = """
Version: $version
Revision: ${getCheckedOutGitCommitHash()}
Buildtime: ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}
Application-name: sogis-interlis-repository
"""
    }
}

tasks.register('createIliModelsXml', ModelRepositoryCreator) {
    group = GROUP
    description = "Create ilimodels.xml file."
    modelsDirectory = file("models/")
    dataFile = file("ilimodels.xml")
    ilismeta = true
    modelRepos = "models-ext/;https://models.geo.admin.ch;https://models.kgk-cgc.ch/;https://vsa.ch/models;https://405.sia.ch/models"
    ignoredDirectories = "mirror"
}
createIliModelsXml.configure { finalizedBy versionTxt }

/*
    Nach Diskussion mit claeis sollen die ilitools Processing Instructions
    nicht unterstützen. Zu viele Dinge sind unklar, z.B. soll die 
    transformierte Datei geprüft werden oder die Originaldatei.
*/
// tasks.register('addXslDeclaration') {
//     group = GROUP
//     description = "Add XSL declaration to ilimodels.xml"
//     doLast {
//         def file = new File("ilimodels.xml")
//         def content = file.text
//         content = content.replaceAll("\\<\\?xml(.+?)\\?\\>", "").trim();
//         content = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<?xml-stylesheet type=\"text/xsl\" href=\"ilimodels.xsl\"?>\n" + content
//         file.write content
//     }
// }    

tasks.register('createIliModelsHtml', JavaExec) {
    group = GROUP
    classpath buildscript.configurations.classpath
    errorOutput = new FileOutputStream('docout.err')
    def inxml = "ilimodels.xml"
    def inxsl = "xsl/ilimodels.xsl"
    def out = "ilimodels.html"
    main = 'org.apache.xalan.xslt.Process'
    args = [
    '-IN', inxml,
    '-XSL', inxsl,
    '-OUT', out
    ].toList()
}

tasks.register('createConfigDataXml', ConfigDataRepositoryCreator) {
    group = GROUP
    description = "Create ilivalidator config ilidata.xml file."
    configDirectory = file("models/")
    dataFile = file("ilidata.xml")
    owner = 'mailto:agi@bd.so.ch'
}

def DOCKER_ACCOUNT = "sogis"
def DOCKER_REPO = "interlis-repository"
def CONTAINER_NAME = "ilirepo"

// only for testing
tasks.register('buildImage', Exec) {
    workingDir "$projectDir"
    commandLine 'docker', 'build',
                '--no-cache', '--force-rm',
                '-t', "$DOCKER_ACCOUNT/$DOCKER_REPO:latest",
                '-f', 'Dockerfile',  '.'
}

tasks.register('startContainer', Exec) {
    workingDir "$projectDir"
    commandLine 'docker', 'run', '-d', '--name', CONTAINER_NAME, '--rm', '-p8080:8080', "$DOCKER_ACCOUNT/$DOCKER_REPO:latest"
     
    doLast { 	
        sleep(10000)
    }
}

tasks.register('stopContainer', Exec) {
    workingDir "$projectDir"
    commandLine 'docker', 'kill', CONTAINER_NAME
}

// It will fail if repository is not ok.
// "Process 'command '/Library/Java/JavaVirtualMachines/jdk8u192-b12/Contents/Home/bin/java'' finished with non-zero exit value 1"
// Es muss --ilidirs verwendet werden, um das localhost-Repo als Quelle für Modell-Importe verwenden zu können (d.h. Solothurner Modelle
// importieren Solothurner Modelle.). Aber das produktive Repo darf (sollte) nicht verwendet werden. Das kann aber wohl nicht definitiv 
// unterbunden werden (?).
tasks.register('checkInterlisRepository', JavaExec) {
    group = GROUP
    description = "Check repository with --check-repo-ilis"
    classpath = buildscript.configurations.classpath
    main = 'ch.interlis.ili2c.Main'
    args  "--check-repo-ilis", "http://localhost:8080", "--ilidirs", "%ILI_DIR;https://models.geo.admin.ch;https://vsa.ch/models;https://405.sia.ch/models;http://localhost:8080" // http://models.interlis.ch/
}
checkInterlisRepository.finalizedBy stopContainer

// local dev: 'docker buildx create --use'
// gh action: handled by the pipeline
task buildAndPushImages(type: Exec) {
    def githash = getCheckedOutGitCommitHash()
    def buildTimestamp = getTimestamp()

    workingDir "$projectDir"
    commandLine 'docker', 'buildx', 'build',
                '--platform', 'linux/arm64,linux/amd64',
                '--no-cache', '--force-rm', '--push',
                '--label', "org.opencontainers.image.title=$project.description",
                '--label', "org.opencontainers.image.version=$version",
                '--label', "org.opencontainers.image.base.name=docker.io/nginx:mainline-alpine",
                '--label', "org.opencontainers.image.created=$buildTimestamp", 
                '--label', "org.opencontainers.image.revision=$githash",
                '-t', "$DOCKER_ACCOUNT/$DOCKER_REPO:latest",
                '-t', "$DOCKER_ACCOUNT/$DOCKER_REPO:$version.major",
                '-t', "$DOCKER_ACCOUNT/$DOCKER_REPO:"+version.major+"."+version.minor,
                '-t', "$DOCKER_ACCOUNT/$DOCKER_REPO:$version",
                '-t', "ghcr.io/$DOCKER_ACCOUNT/$DOCKER_REPO:latest",
                '-t', "ghcr.io/$DOCKER_ACCOUNT/$DOCKER_REPO:$version.major",
                '-t', "ghcr.io/$DOCKER_ACCOUNT/$DOCKER_REPO:"+version.major+"."+version.minor,
                '-t', "ghcr.io/$DOCKER_ACCOUNT/$DOCKER_REPO:$version",
                '-f', 'Dockerfile',  '.'
}

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}

def getTimestamp() {
    def date = new Date()
    return date.format('yyyy-MM-dd HH:mm:ss')
}

// This is how you can grep standard out or standard error.
/*
task checkInterlisRepository() {
    description = "Checks the interlis repository (ili2c --check-repo-ilis)"    
    doLast {
        def os = new ByteArrayOutputStream()
        javaexec {
            classpath = buildscript.configurations.classpath
            main = 'ch.interlis.ili2c.Main'
            args  "--check-repo-ilis", "http://localhost"
            //errorOutput = os
            standardOutput = os
        }
        def buildString = os.toString()
    }
}
*/

def repos = [
        "interlis.ch":"https://models.interlis.ch", 
        "kgk":"https://models.kgk-cgc.ch",
        "geoadminpunktirgendwas":"https://models.geo.admin.ch",
        "vsa":"https://vsa.ch/models/",
        "sia405": "https://405.sia.ch/models/"
        ]
repos.each { k, v ->
    tasks.register("cloneRepo_${k}", JavaExec) {
        classpath = buildscript.configurations.classpath
        main = 'ch.interlis.ili2c.Main'
        args  "--out", "models/mirror/${k}", "--clone-repos", "${v}"
    }

    tasks.register("createIlisiteXml_${k}") {
        dependsOn "cloneRepo_${k}"
        doLast {
            def templateContent = '''<?xml version="1.0"?>
    <TRANSFER xmlns="http://www.interlis.ch/INTERLIS2.3">
    <HEADERSECTION SENDER="SOGIS-20160127" VERSION="2.3">
        <MODELS>
        <MODEL NAME="IliSite09" VERSION="2009-11-12" URI="mailto:ce@eisenhutinformatik.ch"/>
        </MODELS>
    </HEADERSECTION>
    <DATASECTION>
        <IliSite09.SiteMetadata BID="SOb0">
        <IliSite09.SiteMetadata.Site TID="1">
            <Name>Mirror-Repository ${key}</Name>
            <Title>Mirror-Repository Kanton Solothurn: ${key}</Title>
            <shortDescription>Mirror-Modell-Repository für Kanton Solothurn: ${value}</shortDescription>
            <Owner>https://geo.so.ch</Owner>
            <technicalContact>mailto:agi@bd.so.ch</technicalContact>
            <furtherInformation>https://geo.so.ch</furtherInformation>
            <parentSite>
            <IliSite09.RepositoryLocation_>
                <value>https://geo.so.ch/models/mirror</value>
            </IliSite09.RepositoryLocation_>
            </parentSite>
        </IliSite09.SiteMetadata.Site>
        </IliSite09.SiteMetadata>
    </DATASECTION>
    </TRANSFER>'''

            def dataModel = [
                key: k,
                value: v
            ]

            def engine = new SimpleTemplateEngine()
            def template = engine.createTemplate(templateContent).make(dataModel)

            def outputFile = file("models/mirror/${k}/ilisite.xml")
            outputFile.parentFile.mkdirs()
            outputFile.text = template.toString()

            println "XML file generated at: ${outputFile}"
        }
    }
}

tasks.register('cloneRepos') {
    dependsOn {
        tasks.findAll { task -> task.name.startsWith('createIlisiteXml_') }
    }
}

import groovy.text.SimpleTemplateEngine

tasks.register('createMirrorRootIlisiteXml') {
    doLast {
        def templateContent = '''<?xml version="1.0"?>
<TRANSFER xmlns="http://www.interlis.ch/INTERLIS2.3">
  <HEADERSECTION SENDER="SOGIS-20160127" VERSION="2.3">
    <MODELS>
      <MODEL NAME="IliSite09" VERSION="2009-11-12" URI="mailto:ce@eisenhutinformatik.ch"/>
    </MODELS>
  </HEADERSECTION>
  <DATASECTION>
    <IliSite09.SiteMetadata BID="SOb0">
      <IliSite09.SiteMetadata.Site TID="1">
        <Name>Mirror-Repository Kanton Solothurn</Name>
        <Title>Mirror-Repository Kanton Solothurn</Title>
        <shortDescription>Mirror-Modell-Repository für Kanton Solothurn</shortDescription>
        <Owner>https://geo.so.ch</Owner>
        <technicalContact>mailto:agi@bd.so.ch</technicalContact>
        <furtherInformation>https://geo.so.ch</furtherInformation>
        <parentSite>
          <IliSite09.RepositoryLocation_>
            <value>https://geo.so.ch/models</value>
          </IliSite09.RepositoryLocation_>
        </parentSite>
        <subsidiarySite>
        <% repos.each { key, value -> %>
                <IliSite09.RepositoryLocation_>
                    <value>https://geo.so.ch/models/mirror/${key}/</value>
                </IliSite09.RepositoryLocation_>
        <% } %>
        </subsidiarySite>
      </IliSite09.SiteMetadata.Site>
    </IliSite09.SiteMetadata>
  </DATASECTION>
</TRANSFER>'''

        def engine = new SimpleTemplateEngine()
        def template = engine.createTemplate(templateContent).make([repos: repos])

        def outputFile = file("models/mirror/ilisite.xml")
        outputFile.parentFile.mkdirs()
        outputFile.text = template.toString()

        println "XML file generated at: ${outputFile}"
    }
}

